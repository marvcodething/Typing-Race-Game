import React from 'react';
import PropTypes from 'prop-types';
import { useParams } from 'react-router-dom';
import { faker } from '@faker-js/faker';
import RestartButton from "./components/RestartButton.jsx";
import Results from "./components/Results.jsx";
import UserTypings from "./components/UserTypings.jsx";
import useEngine from "./hooks/useEngine.js";

// Ensure words are generated and initialized correctly
function Game() {
    const { state, wordsFromEngine, timeLeft } = useEngine(); // Renamed destructured words to wordsFromEngine
    const { gameCode } = useParams();
    const words = generateWordsUsingFaker(); // Words generated by the first player using Faker.js

    // Function to generate words using Faker.js for the typing race
    function generateWordsUsingFaker() {
        return [...Array(30)].map(() => faker.word.adjective()); // Example of 30 random words
    }

    // Ensure that 'words' is not undefined
    if (!words) {
        return <div>Error: Words were not generated!</div>;
    }

    // Example userInput as an array of strings
    const userInput = ['example', 'user', 'input'];

    return (
        <div>
            <h1 className="hero-content to-">Game Room: {gameCode}</h1>
            <CountdownTimer timeLeft={30}/>
            <WordsContainer>
                <GeneratedWords words={words}/>
                <UserTypings className="absolute inset-0" userInput={userInput} words={words} />
            </WordsContainer>

            <RestartButton
                className={"mx-auto nt-10 text-slate-500"}
                onRestart={() => null}
            />
            <Results
                className='nt-10'
                errors={10}
                accuracyPercentage={100}
                total={30}
            />
            {/* Add your game logic here */}
        </div>
    );
}

function WordsContainer({ children }) {
    return (
        <div className="relative text-3xl max-w-xl leading-relaxed break-all mt-3">
            {children}
        </div>
    );
}

function GeneratedWords({ words }) {
    return (
        <div className="text-primary">
            {words.map((word, index) => (
                <span key={index}>{word} </span>
            ))}
        </div>
    );
}

function CountdownTimer({ timeLeft }) {
    return (<h2 className="hero-content font-medium">Time: {timeLeft}</h2>);
}

GeneratedWords.propTypes = {
    words: PropTypes.arrayOf(PropTypes.string).isRequired,
};

CountdownTimer.propTypes = {
    timeLeft: PropTypes.number.isRequired,
};

export default Game;
